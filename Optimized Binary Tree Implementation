using System;

public class Node
{
    public int Value { get; }
    public Node Left { get; set; }
    public Node Right { get; set; }
    public int Height { get; set; }

    public Node(int value)
    {
        Value = value;
        Height = 1;
    }
}

public class AVLTree
{
    public Node Root { get; private set; }

    public void Insert(int value)
    {
        Root = InsertRecursive(Root, value);
    }

    private Node InsertRecursive(Node node, int value)
    {
        if (node == null)
            return new Node(value);

        if (value < node.Value)
            node.Left = InsertRecursive(node.Left, value);
        else if (value > node.Value)
            node.Right = InsertRecursive(node.Right, value);
        else
            return node; // Duplicate values not allowed

        UpdateHeight(node);
        return Balance(node);
    }

    public bool Search(int value)
    {
        return SearchRecursive(Root, value);
    }

    private bool SearchRecursive(Node node, int value)
    {
        if (node == null) return false;
        if (value == node.Value) return true;
        return value < node.Value
            ? SearchRecursive(node.Left, value)
            : SearchRecursive(node.Right, value);
    }

    private void UpdateHeight(Node node)
    {
        node.Height = 1 + Math.Max(GetHeight(node.Left), GetHeight(node.Right));
    }

    private int GetHeight(Node node) => node?.Height ?? 0;

    private int GetBalanceFactor(Node node)
    {
        return node == null ? 0 : GetHeight(node.Left) - GetHeight(node.Right);
    }

    private Node Balance(Node node)
    {
        int balance = GetBalanceFactor(node);

        if (balance > 1)
        {
            if (GetBalanceFactor(node.Left) < 0)
                node.Left = RotateLeft(node.Left);
            return RotateRight(node);
        }

        if (balance < -1)
        {
            if (GetBalanceFactor(node.Right) > 0)
                node.Right = RotateRight(node.Right);
            return RotateLeft(node);
        }

        return node;
    }

    private Node RotateLeft(Node x)
    {
        Node y = x.Right;
        x.Right = y.Left;
        y.Left = x;

        UpdateHeight(x);
        UpdateHeight(y);
        return y;
    }

    private Node RotateRight(Node y)
    {
        Node x = y.Left;
        y.Left = x.Right;
        x.Right = y;

        UpdateHeight(y);
        UpdateHeight(x);
        return x;
    }

    public void PrintInOrder()
    {
        PrintInOrderRecursive(Root);
        Console.WriteLine();
    }

    private void PrintInOrderRecursive(Node node)
    {
        if (node == null) return;
        PrintInOrderRecursive(node.Left);
        Console.Write($"{node.Value} ");
        PrintInOrderRecursive(node.Right);
    }
}
